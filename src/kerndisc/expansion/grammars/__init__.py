"""Package to maintain and load kernel grammars.

Usage
-----
A new grammar can be defined as a variable in a module namend `_grammar_*.py`, similar to `_grammar_duvenaud.py`.
The new module MUST offer:
    * `parser`: A method which returns the grammars parser.
    * `KernelTransformer`: A transformer class which transforms an `AST` generated by the modules parser into a kernel.
    * `extender`: A method which takes the string representation of a kernel (a kernel expression)
      and applies all possible one step alterations permitted by grammar to it, then returns those.

Any package can be used to create both the parser and the transformer in a new module, as long as:
    * `ast = parser().parse(some_kernel_expression)` returns an `AST` of `some_kernel_expression`,
    * `kernel = KernelTransformer().transform(ast)` returns a gpflow kernel composed of and by the `ast` execution tree,
    * `kernel_alterations = extender(some_kernel_expression)` returns a list of kernel expressions
       which represent every possible one step alteration possible in the grammar.

Support, testing and typing is only offered for `lark-parser` however, so it is advised to use it.

After creation of the module, it can be imported here and add to the `_GRAMMARS` dictionary.
Then it can be selected for execution by setting the environment variable `GRAMMAR`.

For an example of a grammar module see `_grammar_duvenaud.py`.

"""
from functools import lru_cache
import os
from typing import Callable, Dict, Union

import gpflow
from lark import Lark, Transformer

from ._grammar_duvenaud import (extender as extender_duvenaud,
                                KernelTransformer as DuvenaudTransformer,
                                parser as parser_duvenaud)
from ._kernels import BASE_KERNELS, SPECIAL_KERNELS


_DEFAULT_GRAMMAR = 'duvenaud'
_GRAMMARS: Dict[str, Dict[str, Union[Lark, Transformer, Callable]]] = {
    'duvenaud': {
        'parser': parser_duvenaud,
        'transformer': DuvenaudTransformer,
        'extender': extender_duvenaud,
    },
}


@lru_cache(maxsize=1)
def get_current_grammar() -> str:
    """Get currently selected grammar.

    Grammar can be selected by setting the environment variable `GRAMMAR`. Default grammar,
    if non is specified via environment variable, is `duvenaud`.

    Returns
    -------
    grammar_name: str
        Name of currently selected grammar.

    """
    return os.environ.get('GRAMMAR', _DEFAULT_GRAMMAR)


@lru_cache(maxsize=1)
def get_parser() -> Lark:
    """Get parser of currently selected grammar.

    Returns
    -------
    parser: Lark
        Parser of currently selected grammar. Parses by calling: `ast = parser.parse(expression)`.

    """
    return _GRAMMARS[get_current_grammar()]['parser']()


@lru_cache(maxsize=1)
def get_transformer() -> Transformer:
    """Get transformer of currently selected grammar.

    A transformer of a grammar takes the AST of an expression in said grammar and applies a step wise
    transformation to it. This transformation usually goes from leafs to root and MUST return a kernel.

    Returns
    -------
    transformer: Transformer
        Transformer of currently selected grammar. Transforms by calling: `kernel = transformer.transform(ast)`.

    """
    return _GRAMMARS[get_current_grammar()]['transformer']()


@lru_cache(maxsize=1)
def get_extender() -> Callable:
    """Get extender of currently selected grammar.

    An extender takes a kernel expression, such as `'(white) * constant'`, that is valid in the currently selected
    grammar and returns all possible one step alterations of the initial expression.

    Returns
    -------
    extender: Callable
        Extender of currently selected grammar. Extends by calling: `extended_expressions = extender(expression)`.

    """
    return _GRAMMARS[get_current_grammar()]['extender']


def get_kernels() -> Dict[str, gpflow.kernels.Kernel]:
    """Get all kernels available for kernel construction."""
    return BASE_KERNELS


def get_special_kernels() -> Dict[str, gpflow.kernels.Kernel]:
    """Get special kernels available for kernel construction."""
    return SPECIAL_KERNELS


def _get_grammars() -> Dict[str, Dict[str, Union[Lark, Transformer]]]:
    """Get all available Grammars, useful for testing."""
    return _GRAMMARS
