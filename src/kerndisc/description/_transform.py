"""Module to transform a kernel from one representation to another."""
import logging
from typing import Optional

from anytree import Node
import gpflow

from ._util import pretty_ast
from .._kernels import BASE_KERNELS, COMBINATION_KERNELS


_LOGGER = logging.getLogger(__package__)


def kernel_to_ast(kernel: gpflow.kernels.Kernel, root: Optional[Node]=None) -> Node:
    """Generate an AST (abstract syntax tree) of a kernel.

    This method can be useful to generate an AST of a kernel,
    which can later be used to reinstantiate an exact copy of
    a kernel without having to reset any parameters or having to
    look out for defering build.

    The ASTs root will be returned. Each nodes name of the AST is an
    uninstantiated class from `gpflow.kernels`.

    Parameters
    ----------
    kernel: gpflow.kernels.Kernel
        Kernel to be turned into an AST.

    root: Optional[Node]
        Parent the nodes should be attached to.

    Returns
    -------
    root: Node
        Root of generated AST.

    """
    n = Node(type(kernel), parent=root, full_name=kernel.name)

    for child in kernel.children.values():
        if isinstance(child, tuple(BASE_KERNELS.values())) or isinstance(child, tuple(COMBINATION_KERNELS.values())):
            kernel_to_ast(child, root=n)

    if root is None:
        return n


def ast_to_kernel(root: Node) -> gpflow.kernels.Kernel:
    """Generate a kernel from an AST.

    The AST must be generated by `kernel_to_ast`.

    Parameters
    ----------
    root: Node
        Root of AST. Kernel will be built from this node down.

    Returns
    -------
    kernel: gpflow.kernels.Kernel
        A kernel generated by executing the passed AST.

    """
    kernel_class = root.name
    if kernel_class in COMBINATION_KERNELS.values():
        return kernel_class([ast_to_kernel(child) for child in root.children])

    if kernel_class in BASE_KERNELS.values():
        return kernel_class(1)

    _LOGGER.exception(f'Bad AST:\n`{pretty_ast(root)}`\nwas supplied to `ast_to_kernel`.')
    raise RuntimeError('Bad kernel supplied to `ast_to_kernel`.')


def ast_to_text(root: Node) -> str:
    """Generate string representation of an AST.

    The AST must be generated by `kernel_to_ast`.

    Parameters
    ----------
    root: Node
        Root of AST. Kernel will be built from this node down.

    Returns
    -------
    kernel_expression: str
        String representation of passed kernel.

    """
    kernel_class = root.name

    if kernel_class is gpflow.kernels.Sum:
        sum_str = ' + '.join([ast_to_text(child) for child in root.children])
        if root.parent is not None and root.parent.name is gpflow.kernels.Product:
            # Parent is a product, so we need brackets.
            return f'({sum_str})'
        return sum_str

    if kernel_class is gpflow.kernels.Product:
        return ' * '.join([ast_to_text(child) for child in root.children])

    if kernel_class in BASE_KERNELS.values():
        return kernel_class(1).name.lower()

    _LOGGER.exception(f'Bad AST:\n`{pretty_ast(root)}`\nwas supplied to `ast_to_kernel`.')
    raise RuntimeError('Bad kernel supplied to `ast_to_kernel`.')
